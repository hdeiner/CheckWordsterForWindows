// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.3.2.0
//      SpecFlow Generator Version:2.3.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace CheckWordsterForWindows.SpecFlowTests.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.3.2.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class CheckWordsterFakeServerInContainterFeature : Xunit.IClassFixture<CheckWordsterFakeServerInContainterFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "CheckWordsterFakeServerInContainer.feature"
#line hidden
        
        public CheckWordsterFakeServerInContainterFeature(CheckWordsterFakeServerInContainterFeature.FixtureData fixtureData, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "CheckWordsterFakeServerInContainter", @"  For the hipster bank customer
  Who is unhappy with traditional bank check issuing services, because the checks written don’t have that retro feel,
  The CheckWordster is a microservice of a bank check writing service
  That provides the words for the amounts on a check that used to be written by people.
  Unlike ECPS (Enterprise Check Production System),
  Our product gives checks that old time feeling, with amounts in both numbers and words.", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 10
  #line 11
    testRunner.Given("I start the \"wiremock-container\" server", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
        }
        
        void System.IDisposable.Dispose()
        {
            this.ScenarioTearDown();
        }
        
        [Xunit.TheoryAttribute(DisplayName="Convert numbers into words when all goes well")]
        [Xunit.TraitAttribute("FeatureTitle", "CheckWordsterFakeServerInContainter")]
        [Xunit.TraitAttribute("Description", "Convert numbers into words when all goes well")]
        [Xunit.InlineDataAttribute("22", "Twenty two", new string[0])]
        [Xunit.InlineDataAttribute("40", "Forty", new string[0])]
        [Xunit.InlineDataAttribute("65", "Sixty five", new string[0])]
        [Xunit.InlineDataAttribute("256", "Two hundred fifty six", new string[0])]
        [Xunit.InlineDataAttribute("770", "Seven hundred seventy", new string[0])]
        [Xunit.InlineDataAttribute("900", "Nine hundred", new string[0])]
        [Xunit.InlineDataAttribute("1000", "One thousand", new string[0])]
        [Xunit.InlineDataAttribute("1,000", "One thousand", new string[0])]
        [Xunit.InlineDataAttribute("1954", "One thousand nine hundred fifty four", new string[0])]
        [Xunit.InlineDataAttribute("19542", "Nineteen thousand five hundred forty two", new string[0])]
        [Xunit.InlineDataAttribute("319542", "Three hundred nineteen thousand five hundred forty two", new string[0])]
        [Xunit.InlineDataAttribute("319540", "Three hundred nineteen thousand five hundred forty", new string[0])]
        [Xunit.InlineDataAttribute("319500", "Three hundred nineteen thousand five hundred", new string[0])]
        [Xunit.InlineDataAttribute("1,000,000", "One million", new string[0])]
        [Xunit.InlineDataAttribute("1,100,000", "One million one hundred thousand", new string[0])]
        [Xunit.InlineDataAttribute("1,110,000", "One million one hundred ten thousand", new string[0])]
        [Xunit.InlineDataAttribute("1,111,000", "One million one hundred eleven thousand", new string[0])]
        [Xunit.InlineDataAttribute("1,111,100", "One million one hundred eleven thousand one hundred", new string[0])]
        [Xunit.InlineDataAttribute("1,111,110", "One million one hundred eleven thousand one hundred ten", new string[0])]
        [Xunit.InlineDataAttribute("1,111,111", "One million one hundred eleven thousand one hundred eleven", new string[0])]
        [Xunit.InlineDataAttribute("20,000,000", "Twenty million", new string[0])]
        [Xunit.InlineDataAttribute("22,000,000", "Twenty two million", new string[0])]
        [Xunit.InlineDataAttribute("22,200,000", "Twenty two million two hundred thousand", new string[0])]
        [Xunit.InlineDataAttribute("22,220,000", "Twenty two million two hundred twenty thousand", new string[0])]
        [Xunit.InlineDataAttribute("22,222,000", "Twenty two million two hundred twenty two thousand", new string[0])]
        [Xunit.InlineDataAttribute("22,222,200", "Twenty two million two hundred twenty two thousand two hundred", new string[0])]
        [Xunit.InlineDataAttribute("22,222,220", "Twenty two million two hundred twenty two thousand two hundred twenty", new string[0])]
        [Xunit.InlineDataAttribute("22,222,222", "Twenty two million two hundred twenty two thousand two hundred twenty two", new string[0])]
        [Xunit.InlineDataAttribute("300,000,000", "Three hundred million", new string[0])]
        [Xunit.InlineDataAttribute("330,000,000", "Three hundred thirty million", new string[0])]
        [Xunit.InlineDataAttribute("333,000,000", "Three hundred thirty three million", new string[0])]
        [Xunit.InlineDataAttribute("333,300,000", "Three hundred thirty three million three hundred thousand", new string[0])]
        [Xunit.InlineDataAttribute("333,330,000", "Three hundred thirty three million three hundred thirty thousand", new string[0])]
        [Xunit.InlineDataAttribute("333,333,000", "Three hundred thirty three million three hundred thirty three thousand", new string[0])]
        [Xunit.InlineDataAttribute("333,333,300", "Three hundred thirty three million three hundred thirty three thousand three hund" +
            "red", new string[0])]
        [Xunit.InlineDataAttribute("333,333,330", "Three hundred thirty three million three hundred thirty three thousand three hund" +
            "red thirty", new string[0])]
        [Xunit.InlineDataAttribute("333,333,333", "Three hundred thirty three million three hundred thirty three thousand three hund" +
            "red thirty three", new string[0])]
        [Xunit.InlineDataAttribute("4,000,000,000", "Four billion", new string[0])]
        [Xunit.InlineDataAttribute("4,400,000,000", "Four billion four hundred million", new string[0])]
        [Xunit.InlineDataAttribute("4,440,000,000", "Four billion four hundred forty million", new string[0])]
        [Xunit.InlineDataAttribute("4,444,000,000", "Four billion four hundred forty four million", new string[0])]
        [Xunit.InlineDataAttribute("4,444,400,000", "Four billion four hundred forty four million four hundred thousand", new string[0])]
        [Xunit.InlineDataAttribute("4,444,440,000", "Four billion four hundred forty four million four hundred forty thousand", new string[0])]
        [Xunit.InlineDataAttribute("4,444,444,000", "Four billion four hundred forty four million four hundred forty four thousand", new string[0])]
        [Xunit.InlineDataAttribute("4,444,444,400", "Four billion four hundred forty four million four hundred forty four thousand fou" +
            "r hundred", new string[0])]
        [Xunit.InlineDataAttribute("4,444,444,440", "Four billion four hundred forty four million four hundred forty four thousand fou" +
            "r hundred forty", new string[0])]
        [Xunit.InlineDataAttribute("4,444,444,444", "Four billion four hundred forty four million four hundred forty four thousand fou" +
            "r hundred forty four", new string[0])]
        [Xunit.InlineDataAttribute("5000000000000", "Five trillion", new string[0])]
        [Xunit.InlineDataAttribute("5500000000000", "Five trillion five hundred billion", new string[0])]
        [Xunit.InlineDataAttribute("5550000000000", "Five trillion five hundred fifty billion", new string[0])]
        [Xunit.InlineDataAttribute("5555000000000", "Five trillion five hundred fifty five billion", new string[0])]
        [Xunit.InlineDataAttribute("5555500000000", "Five trillion five hundred fifty five billion five hundred million", new string[0])]
        [Xunit.InlineDataAttribute("5555550000000", "Five trillion five hundred fifty five billion five hundred fifty million", new string[0])]
        [Xunit.InlineDataAttribute("5555555000000", "Five trillion five hundred fifty five billion five hundred fifty five million", new string[0])]
        [Xunit.InlineDataAttribute("5555555500000", "Five trillion five hundred fifty five billion five hundred fifty five million fiv" +
            "e hundred thousand", new string[0])]
        [Xunit.InlineDataAttribute("5555555550000", "Five trillion five hundred fifty five billion five hundred fifty five million fiv" +
            "e hundred fifty thousand", new string[0])]
        [Xunit.InlineDataAttribute("5555555555000", "Five trillion five hundred fifty five billion five hundred fifty five million fiv" +
            "e hundred fifty five thousand", new string[0])]
        [Xunit.InlineDataAttribute("5555555555500", "Five trillion five hundred fifty five billion five hundred fifty five million fiv" +
            "e hundred fifty five thousand five hundred", new string[0])]
        [Xunit.InlineDataAttribute("5555555555550", "Five trillion five hundred fifty five billion five hundred fifty five million fiv" +
            "e hundred fifty five thousand five hundred fifty", new string[0])]
        [Xunit.InlineDataAttribute("5555555555555", "Five trillion five hundred fifty five billion five hundred fifty five million fiv" +
            "e hundred fifty five thousand five hundred fifty five", new string[0])]
        [Xunit.InlineDataAttribute("2.25", "Two and 25/100", new string[0])]
        [Xunit.InlineDataAttribute("3.1", "Three and 10/100", new string[0])]
        public virtual void ConvertNumbersIntoWordsWhenAllGoesWell(string number, string words, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Convert numbers into words when all goes well", exampleTags);
#line 13
  this.ScenarioSetup(scenarioInfo);
#line 10
  this.FeatureBackground();
#line 14
    testRunner.When(string.Format("I convert \"{0}\" into words", number), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 15
    testRunner.Then(string.Format("it should be \"{0}\"", words), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Stop server")]
        [Xunit.TraitAttribute("FeatureTitle", "CheckWordsterFakeServerInContainter")]
        [Xunit.TraitAttribute("Description", "Stop server")]
        public virtual void StopServer()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Stop server", ((string[])(null)));
#line 82
  this.ScenarioSetup(scenarioInfo);
#line 10
  this.FeatureBackground();
#line 83
    testRunner.Then("I stop the server", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.3.2.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                CheckWordsterFakeServerInContainterFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                CheckWordsterFakeServerInContainterFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
